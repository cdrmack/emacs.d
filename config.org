#+TITLE: GNU Emacs Configuration
#+AUTHOR: cdrmack
#+STARTUP: overview

This is my GNU Emacs configuration file, written in org and... Emacs of course.

* General Settings

I want my Emacs to start with an empty =*scratch*= buffer.
This is why I disable the startup-message.

#+begin_src emacs-lisp
  (setq inhibit-startup-message t)
  (setq initial-scratch-message "")
#+end_src

I use a separate file for storing Emacs' customization information.
By default it's stored in the init file specified by the =user-init-file= variable.
However it can be changed by modyfing the =custom-file= variable.

#+begin_src emacs-lisp
  (setq custom-file
	(expand-file-name "custom.el" user-emacs-directory))
  (load custom-file 'noerror 'nomessage)
#+end_src

Use =<escape>= globally to exit the current "mode".

#+begin_src emacs-lisp
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+end_src

I prefer =ibuffer= over =list-buffers=.

#+begin_src emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ibuffer)
#+end_src

Do not flash the screen when I do something stupid.

#+begin_src emacs-lisp
  (setq visible-bell nil)
#+end_src

I am also too lazy to write =yes= or =no= in different prompts.
The following alias allows me to simply type =y= or =n= when asked.

#+begin_src emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+end_src

If a file changes on the disk I want Emacs to detect that and refresh my buffer automatically.
Same goes when I am currently in the =dired-mode= and files' structure changes.

#+begin_src emacs-lisp
  (global-auto-revert-mode t)
#+end_src

=recentf-mode= - when enabled I can check the recently operated files with =M-x recentf-open-files=.

#+begin_src emacs-lisp
  (recentf-mode t)
#+end_src

Save minibuffer history to the =savehist-file=.
I can then use =M-n= and =M-p= in the minibuffer to scroll through it.

#+begin_src emacs-lisp
  (setq history-length 25)
  (savehist-mode t)
#+end_src

Please replace the selection when I type!

#+begin_src emacs-lisp
  (delete-selection-mode t)
#+end_src

By default =zap-up-to-char= removes text from the current cursor position to a given char... including the char.
I do not want that. Please leave this poor char alone!

#+begin_src emacs-lisp
  (autoload 'zap-up-to-char "misc"
    "Kill up to, but not including ARGth occurrence of CHAR." t)
  (global-set-key (kbd "M-z") 'zap-up-to-char)
#+end_src

=saveplace= is a built-in package that allows saving the cursor position in a file.
When I reopen the same file later on, the coursor will be set in the saved position.

#+begin_src emacs-lisp
  (save-place-mode t)
#+end_src

I like to know what time it is.

#+begin_src emacs-lisp
  (display-time-mode t)
#+end_src

Store autosave files in a specific directory.

#+begin_src emacs-lisp
  (setq auto-save-file-name-transforms
	`((".*" ,(concat user-emacs-directory "auto-save/") t)))
#+end_src

Same for the backup files.

#+begin_src emacs-lisp
  (setq backup-by-copying t
	backup-directory-alist `(("." . ,(concat user-emacs-directory "backups/")))
	delete-old-versions t
	kept-new-versions 6
	kept-old-versions 2)
#+end_src

Cleanup whitespace on save.

#+begin_src emacs-lisp
  (add-hook 'before-save-hook 'whitespace-cleanup)
#+end_src

** Packages Repositories

In Emacs you can use more than one repository to download packages.
Repositories are stored in the variable called =package-archives=.

#+begin_src emacs-lisp
  (require 'package)
  (setq package-archives '(("elpa" . "https://elpa.gnu.org/packages/")
			   ("melpa" . "https://melpa.org/packages/")
			   ("org" . "https://orgmode.org/elpa/")))

  (package-initialize)

  (unless package-archive-contents
    (package-refresh-contents))
#+end_src

I use =use-package= to keep all my packages clean and sexy.
Before I will use it I need to install it though since it's not a built-in package.

#+begin_src emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
#+end_src

The =:ensure= keyword causes the package to be installed automatically if not already present in the system.
The variable below makes sure that setting is set by default for all packages.

#+begin_src emacs-lisp
  (setq use-package-always-ensure t)
#+end_src

* Look

I like to have more than less space for my buffers.
This is why I disable menu-bar, tool-bar and scroll-bars.

#+begin_src emacs-lisp
  (menu-bar-mode 0)
  (tool-bar-mode 0)
  (scroll-bar-mode 0)
#+end_src

Even though I do not use mouse in Emacs I decided to disable tooltips in a pop-up window.

#+begin_src emacs-lisp
  (tooltip-mode 0)
#+end_src

I also like to see line numbers always (almost) visible.

#+begin_src emacs-lisp
  (column-number-mode t)
  (global-display-line-numbers-mode t)

  (add-hook 'prog-mode-hook 'display-line-numbers-mode)
  (setq-default display-line-numbers-width 3)
#+end_src

I use doom-palenight theme.

#+begin_src emacs-lisp
  (use-package doom-themes
    :init
    (load-theme 'doom-palenight t))
#+end_src

Use and format various icon fonts withing Emacs.
Run =M-x nerd-icons-install-fonts= when on a new machine.

#+begin_src emacs-lisp
  (use-package nerd-icons)
#+end_src

Highlight the current line.

#+begin_src emacs-lisp
  (global-hl-line-mode 1)
#+end_src

Operate by visual lines instead of logical lines.

#+begin_src emacs-lisp
  (global-visual-line-mode 1)
#+end_src

In my opinion font is a really important thing. I used to look at the code and wonder:

#+begin_quote
Is it a big O or 0?
Is it l (small L) or maybe I (capital i)?
#+end_quote

Well... not anymore! I highly encourage you to take your time and find a font that suits your needs.

I'm currently testing =Fira Code=.

#+begin_src emacs-lisp
  (set-face-attribute 'default nil
		      :family "Fira Code"
		      :height 120
		      :weight 'normal
		      :width 'normal)
#+end_src

On FreeBSD it can be installed via =pkg(8)=.

#+begin_src shell
  pkg install firacode
#+end_src

Emojis... ðŸ‘€

#+begin_src emacs-lisp
  (set-fontset-font t 'unicode "Symbola" nil 'prepend)
#+end_src

Don't use dialog boxes. I prefer working with the keyboard.

#+begin_src emacs-lisp
  (setq use-dialog-box nil)
#+end_src

Fancy mode-line.

#+begin_src emacs-lisp
  (use-package doom-modeline
    :init (doom-modeline-mode 1))
#+end_src

* Completion

More fine-grained minibuffer completion feedback scheme.

#+begin_src emacs-lisp
  (use-package icomplete
    :init
    (icomplete-mode 1)
    :config
    (fido-mode 1)
    (fido-vertical-mode 1))
#+end_src

Displays the key bindings following my currently entered incomplete command.

#+begin_src emacs-lisp
  (use-package which-key
    :diminish
    :init (which-key-mode)
    :config
    (setq which-key-idle-delay 0.5))
#+end_src

* Navigation

Replaces built-in =other-window= by assigning each window a short, unique label.

#+begin_src emacs-lisp
  (use-package ace-window
    :bind (("C-x o" . ace-window)))
#+end_src

Increase the selected region by semantic units.

#+begin_src emacs-lisp
  (use-package expand-region
    :bind ("C-=" . er/expand-region))
#+end_src

#+begin_src emacs-lisp
  (use-package multiple-cursors)
#+end_src

* Search

=avy= is a package that helps with moving point all over Emacs.
It has this cool feature to jump to the location with a single keystroke.

#+begin_src emacs-lisp
  (use-package avy
    :bind (("C-;" . avy-goto-char)))
#+end_src

* Code

Disable tabs globally. Previously this was hooked only to the C and C++ mode hooks but tabs were being automatically inserted in org-mode source blocks.

#+begin_src emacs-lisp
  (setq indent-tabs-mode nil)
#+end_src

Enable colorful delimiters for all programming-related modes.

#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook
    (prog-mode . rainbow-delimiters-mode))
#+end_src

Language Server Protocol provides language-specific features like marking of warnings, errors, code completion and more.

#+begin_src emacs-lisp
  (use-package lsp-mode
    :diminish
    :init
    (setq lsp-enable-snippet nil)
    (setq lsp-keymap-prefix "C-c l")
    (setq lsp-idle-delay 0.1)
    :hook
    ((rustic-mode . lsp)
     (lsp-mode . lsp-enable-which-key-integration))
    :commands lsp
    :config
    (add-hook 'lsp-mode-hook 'lsp-ui-mode))
#+end_src

Activates higher level UI modules of =lsp-mode=.

#+begin_src emacs-lisp
  (use-package lsp-ui
    :diminish
    :commands lsp-ui-mode
    :custom
    (lsp-ui-peek-always-show t)
    (lsp-ui-sideline-show-hover t)
    (lsp-ui-doc-enable nil))
#+end_src

On-the-fly syntax checking, intended as replacement for the older =flymake=.
For example it underlines and additionaly gives some comments about the issue.

#+begin_src emacs-lisp
  (use-package flycheck
    :diminish)
#+end_src

Project management and navigation.

#+begin_src emacs-lisp
  (use-package projectile
    :init
    (projectile-mode 1)
    :diminish
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    (setq projectile-enable-caching t)
    ;; ignoring specific buffers by name
    (setq projectile-globally-ignored-buffers
	  '("*scratch*"
	    "*lsp-log*"))
    ;; ignoring buffers by their major mode
    (setq projectile-globally-ignored-modes
	  '("help-mode"
	    "erc-mode"
	    "completion-list-mode"
	    "Buffer-menu-mode"
	    "gnus-.*-mode"
	    "occur-mode")))
#+end_src

Git user interface.

#+begin_src emacs-lisp
  (use-package magit)
#+end_src

=company= ("complete anything") - modular completion framework.

#+begin_src emacs-lisp
  (use-package company
    :diminish
    :config
    (setq company-idle-delay 0.0)
    (setq company-minimum-prefix-length 1)
    (global-company-mode 1))
#+end_src

Selectively hide/show code and comment blocks.

#+begin_src emacs-lisp
  (add-hook 'prog-mode-hook #'hs-minor-mode)
  (global-set-key (kbd "C-c t") 'hs-toggle-hiding)
#+end_src

Helps to deal with parens pairs.

#+begin_src emacs-lisp
  (use-package smartparens
    :hook (prog-mode text-mode markdown-mode)
    :config
    (require 'smartparens-config))
#+end_src

** C and C++

Change some C and C++ defaults.

#+begin_src emacs-lisp
  (defun my-c-mode-hook ()
    (c-set-offset 'substatement-open 0)
    (setq c++-tab-always-indent t)
    (setq c-basic-offset 4)
    (setq c-indent-level 4)
    (setq tab-width 4))

  (add-hook 'c-mode-common-hook 'my-c-mode-hook)

  (add-hook 'c-mode-hook 'lsp)
  (add-hook 'c++-mode-hook 'lsp)

  (setq gc-cons-threshold (* 100 1024 1024)
	read-process-output-max (* 1024 1024))
#+end_src

Support for =CMake=.

#+begin_src emacs-lisp
  (use-package cmake-mode)
#+end_src

=clangd= reads =compile_commands.json= to get familiar with the compilation flags for the project.
This file can be generated with =bear=.

#+begin_src shell
  cmake ..
  bear -- make -j8
#+end_src

It can be also generated by adding =set(CMAKE_EXPORT_COMPILE_COMMANDS ON)= in CMakeLists.txt.

I'm kinda pedantic, not gonna lie.

#+begin_src emacs-lisp
  (use-package clang-format
    :config
    (setq clang-format-style "file"))

  (defun clang-format-save-hook-for-this-buffer ()
    (add-hook 'before-save-hook
	      (lambda ()
		(when (locate-dominating-file "." ".clang-format")
		  (clang-format-buffer))
		;; continue to save
		nil)
	      nil
	      ;; buffer local hook
	      t))

  (add-hook 'c-mode-hook (lambda () (clang-format-save-hook-for-this-buffer)))
  (add-hook 'c++-mode-hook (lambda () (clang-format-save-hook-for-this-buffer)))
#+end_src

My default =.clang-format= file for C++.

#+begin_example
  BasedOnStyle: LLVM
  IndentWidth: 4
  ---
  Language: Cpp
  DerivePointerAlignment: false
  PointerAlignment: Left
#+end_example

** Zig

Support for the Zig language.

#+begin_src emacs-lisp
  (use-package zig-mode)
#+end_src

** Rust

=rustic= is based on =rust-mode= but provides additional features.

#+begin_src emacs-lisp
  (use-package rustic
    :diminish
    :config
    (setq rustic-format-on-save nil))
#+end_src

=rust-analyzer= is an implementation of lsp for Rust. It can be installed with =rustup=.

#+begin_src shell
  rustup component add rust-analyzer
#+end_src

** Clojure

"Clojure Interactive Development Environment that Rocks"

#+begin_src emacs-lisp
  (use-package cider
    :diminish)
#+end_src

** Scheme

Enhanced REPL and a set of minor modes for Scheme.

#+begin_src emacs-lisp
  (use-package geiser)
#+end_src

Support for CHICKEN.

#+begin_src emacs-lisp
  (use-package geiser-chicken)
#+end_src

** Common Lisp

SLY is a direct fork of SLIME with some improvements.

#+begin_src emacs-lisp
  (use-package sly)
#+end_src

Make sure to use =sbcl= program as an Common Lisp implementation.

#+begin_src emacs-lisp
  (setq inferior-lisp-program "sbcl")
#+end_src

** GDScript

Scripting language used with the Godot Engine.

#+begin_src emacs-lisp
  (use-package gdscript-mode)
#+end_src

** VHDL

Some extra support for the VHDL files.

#+begin_src emacs-lisp
  (use-package vhdl-ext)
#+end_src

* org-mode

Where do I even start...

#+begin_src emacs-lisp
  (use-package org
    :bind
    (("C-c l" . org-store-link)
     ("C-c a" . org-agenda)
     ("C-c c" . org-capture)))

  (setq org-agenda-files `(,org-directory))
  (setq org-default-notes-file
	(expand-file-name "notes.org" org-directory))

  ;; files are relative to `org-directory` when not an absolute path
  (setq org-capture-templates
	'(("t" "Task" entry (file+headline "notes.org" "Tasks")
	   "* TODO %?\n %i\n")
	  ("p" "Project" entry (file+headline "notes.org" "Projects")
	   "* %?\n %i\n")
	  ("n" "Note" entry (file+headline "notes.org" "Notes")
	   "* %?\n %i\n")))
#+end_src

Add gemini protocol to the org-mode export backend.

#+begin_src emacs-lisp
  (use-package ox-gemini)
#+end_src

Add RSS 2.0 to the org-mode export backend.

#+begin_src emacs-lisp
  (use-package ox-rss)
#+end_src
