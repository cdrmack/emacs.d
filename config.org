#+TITLE: GNU Emacs Configuration
#+AUTHOR: cdrmack
#+STARTUP: overview

This is my GNU Emacs configuration file, written in org and... Emacs of course.

* General Settings

First of all let's enable lexical binding.

#+begin_src emacs-lisp
  ;; -*- lexical-binding: t; -*-
#+end_src

I want my Emacs to start with an empty =*scratch*= buffer.
This is why I disable the startup-message.

#+begin_src emacs-lisp
  (setq inhibit-startup-message t)
  (setq initial-scratch-message "")
#+end_src

I use a separate file for storing Emacs' customization information.
By default it's stored in the init file specified by the =user-init-file= variable.
However it can be changed by modifying the =custom-file= variable.

#+begin_src emacs-lisp
  (setq custom-file
        (expand-file-name "custom.el" user-emacs-directory))
  (load custom-file 'noerror 'nomessage)
#+end_src

Increase garbage collection threshold.

#+begin_src emacs-lisp
  (setq gc-cons-threshold (* 100 1024 1024)
        read-process-output-max (* 1024 1024))
#+end_src

Store autosave files in a specific directory.

#+begin_src emacs-lisp
  (let ((auto-save-dir (expand-file-name "auto-save/" user-emacs-directory)))
    (unless (file-exists-p auto-save-dir)
      (make-directory auto-save-dir))
    (setq auto-save-file-name-transforms `((".*" ,auto-save-dir) t)))
#+end_src

Same for backup files.

#+begin_src emacs-lisp
  (let ((backup-dir (expand-file-name "backup/" user-emacs-directory)))
    (unless (file-exists-p backup-dir)
      (make-directory backup-dir))
    (setq backup-directory-alist `(("." . ,backup-dir))))

  (setq backup-by-copying t
        delete-old-versions t
        kept-new-versions 6
        kept-old-versions 2)
#+end_src

Use =<escape>= globally to exit the current "mode".

#+begin_src emacs-lisp
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+end_src

I prefer =ibuffer= over =list-buffers=.

#+begin_src emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ibuffer)
#+end_src

Do not flash the screen when I do something stupid.

#+begin_src emacs-lisp
  (setq visible-bell nil)
#+end_src

I am also too lazy to write =yes= or =no= in different prompts.
The following alias allows me to simply type =y= or =n= when asked.

#+begin_src emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+end_src

If a file changes on the disk I want Emacs to detect that and refresh my buffer automatically.
Same goes when I am currently in the =dired-mode= and files' structure changes.

#+begin_src emacs-lisp
  (global-auto-revert-mode t)
#+end_src

Save minibuffer history to the =savehist-file=.
I can then use =M-n= and =M-p= in the minibuffer to scroll through it.

#+begin_src emacs-lisp
  (setq history-length 25)
  (savehist-mode t)
#+end_src

Please replace the selection when I type!

#+begin_src emacs-lisp
  (delete-selection-mode t)
#+end_src

By default =zap-up-to-char= removes text from the current cursor position to a given char... including the char.
I do not want that. Please leave this poor char alone!

#+begin_src emacs-lisp
  (autoload 'zap-up-to-char "misc"
    "Kill up to, but not including ARGth occurrence of CHAR." t)
  (global-set-key (kbd "M-z") 'zap-up-to-char)
#+end_src

=saveplace= is a built-in package that allows saving the point (cursor position) in a file.
When I reopen the same file later on, the point will be set in the saved position.

#+begin_src emacs-lisp
  (save-place-mode t)
#+end_src

I like to know what time it is.

#+begin_src emacs-lisp
  (display-time-mode t)
#+end_src

Cleanup whitespace on save.

#+begin_src emacs-lisp
  (add-hook 'before-save-hook 'whitespace-cleanup)
#+end_src

Do not suspend the frame.

#+begin_src emacs-lisp
  (global-unset-key (kbd "C-z"))
#+end_src

=elfeed= is an Atom/RSS feed reader.

#+begin_src emacs-lisp
  (use-package elfeed
    :bind (("C-c w" . elfeed))
    :config
    (setq elfeed-feeds
        '("https://cdrmack.dev/rss.xml")))
#+end_src

** Packages Repositories

In Emacs it's possible to use more than one repository to download packages.
Repositories are stored in the variable called =package-archives=.

#+begin_src emacs-lisp
  (require 'package)
  (setq package-archives '(("elpa" . "https://elpa.gnu.org/packages/")
                           ("melpa" . "https://melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")))

  (package-initialize)
  (package-refresh-contents)
#+end_src

The =:ensure= keyword (in =use-package=) causes the package to be installed automatically if not already present in the system.
The variable below makes sure that setting is set by default for all packages.

#+begin_src emacs-lisp
  (require 'use-package-ensure)
  (setq use-package-always-ensure t)
#+end_src

* Look

I like to have more than less space for my buffers.
This is why I disable menu-bar, tool-bar and scroll-bars.

#+begin_src emacs-lisp
  (menu-bar-mode 0)
  (tool-bar-mode 0)
  (scroll-bar-mode 0)
#+end_src

Even though I do not use mouse in Emacs I decided to disable tooltips in a pop-up window.

#+begin_src emacs-lisp
  (tooltip-mode 0)
#+end_src

I also like to see line numbers always (almost) visible.

#+begin_src emacs-lisp
  (column-number-mode t)
  (add-hook 'prog-mode-hook 'display-line-numbers-mode)
  (setq display-line-numbers-width 3)
  (setopt display-line-numbers-type 'relative)
#+end_src

I use doom-palenight theme.

#+begin_src emacs-lisp
  (use-package doom-themes
    :config
    (load-theme 'doom-palenight t))
#+end_src

Use and format various icon fonts withing Emacs.
Run =M-x nerd-icons-install-fonts= when on a new machine.

#+begin_src emacs-lisp
  (use-package nerd-icons)
#+end_src

Highlight the current line.

#+begin_src emacs-lisp
  (global-hl-line-mode 1)
#+end_src

Operate by visual lines instead of logical lines.

#+begin_src emacs-lisp
  (add-hook 'text-mode-hook 'visual-line-mode)
#+end_src

In my opinion font is a really important thing. I used to look at the code and wonder:

#+begin_quote
Is it a big O (letter 'o') or 0 (digit zero)?
Is it l (small letter 'L') or maybe I (capital 'i')?
#+end_quote

Well... not anymore! I highly encourage you to take your time and find a font that suits your needs.

I'm currently testing =Fira Code=.

#+begin_src emacs-lisp
  (set-face-attribute 'default nil
                      :family "Fira Code"
                      :height 120)
#+end_src

On FreeBSD it can be installed via =pkg(8)=.

#+begin_src shell
  pkg install firacode
#+end_src

Emojis... ðŸ‘€

#+begin_src emacs-lisp
  (set-fontset-font t 'unicode "Symbola" nil 'prepend)
#+end_src

Don't use dialog boxes. I prefer working with the keyboard.

#+begin_src emacs-lisp
  (setq use-dialog-box nil)
#+end_src

Fancy mode-line.

#+begin_src emacs-lisp
  (use-package doom-modeline
    :config
    (doom-modeline-mode 1))
#+end_src

* Completion

More fine-grained minibuffer completion feedback scheme.
Press =M-j= to exit minibuffer with the current input (ignores completion).

#+begin_src emacs-lisp
  (use-package icomplete
    :config
    (fido-vertical-mode 1))
#+end_src

Displays the key bindings following my currently entered incomplete command.

#+begin_src emacs-lisp
  (use-package which-key
    :init (which-key-mode)
    :config
    (setq which-key-idle-delay 1.0))
#+end_src

* Navigation

Replaces built-in =other-window= by assigning each window a short, unique label.

#+begin_src emacs-lisp
  (use-package ace-window
    :bind (("C-x o" . ace-window)))
#+end_src

Increase the selected region by semantic units.

#+begin_src emacs-lisp
  (use-package expand-region
    :bind ("C-=" . er/expand-region))
#+end_src

#+begin_src emacs-lisp
  (use-package multiple-cursors
    :bind (("C->" . 'mc/mark-next-like-this)
           ("C-<" . 'mc/mark-previous-like-this)
           ("C-c C-<" . 'mc/mark-all-like-this)))
#+end_src

* Search

=avy= is a package that helps with moving point all over Emacs.
It has this cool feature to jump to the location with a single keystroke.

#+begin_src emacs-lisp
  (use-package avy
    :bind (("C-;" . avy-goto-char)))
#+end_src

* Code

Package for =.editorconfig=. It helps to define and maintain coding style.

#+begin_src emacs-lisp
  (use-package editorconfig
    :config
    (editorconfig-mode 1))
#+end_src

#+begin_src emacs-lisp
  (use-package markdown-mode
    :hook
    ((markdown-mode . visual-line-mode)))
#+end_src

#+begin_src emacs-lisp
  (use-package json-mode
    :hook
    ((json-mode . visual-line-mode)))
#+end_src

#+begin_src emacs-lisp
  (use-package yaml-mode
    :hook
    ((yaml-mode . visual-line-mode)))
#+end_src

Enable colorful delimiters for all programming-related modes.

#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook
    (prog-mode . rainbow-delimiters-mode))
#+end_src

On-the-fly syntax checking, intended as replacement for the older =flymake=.
For example it underlines and additionally gives some comments about the issue.

#+begin_src emacs-lisp
  (use-package flycheck)
#+end_src

Project management and navigation.

#+begin_src emacs-lisp
  (use-package project)
#+end_src

Git user interface.

#+begin_src emacs-lisp
  (use-package magit)
#+end_src

=company= ("complete anything") - modular completion framework.

#+begin_src emacs-lisp
  (use-package company
    :config
    (setq company-idle-delay 0.0)
    (setq company-minimum-prefix-length 1)
    (global-company-mode 1))
#+end_src

I should check built-in =completion-preview-mode=.

Parse control sequences for the compilation output.

#+begin_src emacs-lisp
  (use-package ansi-color
    :hook
    (compilation-filter . ansi-color-compilation-filter))
#+end_src

Selectively hide/show code and comment blocks.

#+begin_src emacs-lisp
  (add-hook 'prog-mode-hook #'hs-minor-mode)
  (global-set-key (kbd "C-c t") 'hs-toggle-hiding)
#+end_src

Display name of the current function.

#+begin_src emacs-lisp
  (which-function-mode 1)
#+end_src

"Emacs Polyglot" - built-in LSP client.

#+begin_src emacs-lisp
  (use-package eglot
    :hook
    (c-ts-mode . eglot-ensure)
    (c++-ts-mode . eglot-ensure)
    :custom
    (eglot-send-changes-idle-time 0.1)
    (eglot-extend-to-xref t)
    :config
    ;; don't log every event
    (fset #'jsonrpc--log-event #'ignore)
    :bind
    (:map eglot-mode-map
          ("C-c c a" . eglot-code-actions)))
#+end_src

Treesit integrates tree-sitter which is used to create a syntax tree.

#+begin_src emacs-lisp
  (use-package emacs
    :config
    (setq major-mode-remap-alist
          '((c-mode . c-ts-mode)
            (c++-mode . c++-ts-mode)
            (c-or-c++-mode . c-or-c++-ts-mode)))
    :hook
    ;; match parenthesis
    ((prog-mode . electric-pair-mode)))
#+end_src

#+begin_src emacs-lisp
  (use-package markdown-mode
    :hook
    ((markdown-mode . visual-line-mode)))
#+end_src

#+begin_src emacs-lisp
  (use-package json-mode
    :hook
    ((json-mode . visual-line-mode)))
#+end_src

#+begin_src emacs-lisp
  (use-package yaml-mode
    :hook
    ((yaml-mode . visual-line-mode)))
#+end_src

** C and C++

Support for =CMake=.

#+begin_src emacs-lisp
  (use-package cmake-mode)
#+end_src

=clangd= (LSP server) reads =compile_commands.json= (or =compile_flags.txt=) to get familiar with the project.
This json file can be generated by =CMake= when relevant variable is set in the =CMakeLists.txt=.

#+begin_src cmake
  set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
#+end_src

This file can also be generated with =bear= that intercepts compiler calls.

#+begin_src shell
  bear -- make
 #+end_src

Sometimes I use =etags(1)= or =exctags(1)= to navigate through the source code.
On FreeBSD, standard C header files are under =/usr/include/= and system's source code under =/usr/src/=.

#+begin_src shell
  find /usr/include/ -name "*.[chCH]" -print | etags -
#+end_src

#+begin_src shell
  exctags -f TAGS -R -e --languages=C,C++ /usr/include/
#+end_src

Set C (and C++) indent style.

#+begin_src emacs-lisp
  (setopt c-ts-mode-indent-style 'bsd)
#+end_src

I'm kinda pedantic, not gonna lie.

#+begin_src emacs-lisp
  (use-package clang-format
    :config
    (setq clang-format-style "file"))

  (defun clang-format-save-hook-for-this-buffer ()
    (add-hook 'before-save-hook
              (lambda ()
                (when (locate-dominating-file "." ".clang-format")
                  (clang-format-buffer))
                ;; continue to save
                nil)
              nil
              ;; buffer local hook
              t))

  (add-hook 'c-mode-hook
            (lambda ()
              (clang-format-save-hook-for-this-buffer)))

  (add-hook 'c++-mode-hook
            (lambda ()
              (clang-format-save-hook-for-this-buffer)))
#+end_src

My default =.clang-format= file for C.

#+begin_example
  Language: Cpp
  BasedOnStyle: LLVM
  IndentWidth: 4
  DerivePointerAlignment: false
  PointerAlignment: Right
  BreakBeforeBraces: Allman
#+end_example

=Language: Cpp= is used for both: C and C++. More options can be found on the [[https://clang.llvm.org/docs/ClangFormatStyleOptions.html][official page]].

** Zig

Support for the Zig language.

#+begin_src emacs-lisp
  (use-package zig-mode)
#+end_src

** Rust

Support for the Rust language.

#+begin_src emacs-lisp
  (use-package rust-mode)
#+end_src

** Scheme

Keep parentheses balanced.

#+begin_src emacs-lisp
  (use-package paredit)
#+end_src

Enhanced REPL and a set of minor modes for Scheme.

#+begin_src emacs-lisp
  (use-package geiser)
#+end_src

Support for the CHICKEN.

#+begin_src emacs-lisp
  (use-package geiser-chicken
    :config
    (setq geiser-chicken-binary "chicken-csi"))
#+end_src

According to the official docs some eggs should be additionally installed:
https://wiki.call-cc.org/emacs

* org-mode

Where do I even start...

#+begin_src emacs-lisp
  (use-package org)
#+end_src

Add gemini protocol and RSS 2.0 to the org-mode export backend.

#+begin_src emacs-lisp
  (use-package ox-gemini)
  (use-package ox-rss)
#+end_src

Let's give =org-roam= a try.
Static graph expects =graphviz= in the system.

#+begin_src emacs-lisp
  (use-package org-roam
    :custom
    (org-roam-directory "~/.org/roam/")
    :bind (("C-c n l" . org-roam-buffer-toggle)
           ("C-c n f" . org-roam-node-find)
           ("C-c n g" . org-roam-graph)
           ("C-c n i" . org-roam-node-insert)
           ("C-c n c" . org-roam-capture)
           ;;dailies
           ("C-c n j" . org-roam-dailies-capture-today))
    :config
    ;; more informative completion iterface for vertical completion framework
    (setq org-roam-node-display-template
        (concat "${title:*} "
                (propertize "${tags:10}" 'face 'org-tag)))
    (org-roam-db-autosync-mode)
    (require 'org-roam-protocol))
#+end_src

* LLM

LLM chat client.

#+begin_src emacs-lisp
  (use-package gptel
    :bind
    ("C-c l" . gptel-menu))
#+end_src

I should probably also test =ellama= package.
